#pragma once
#include <array>
#include <cassert>
#include <cstddef>
#include <cstdint>
#include <exception>
#include <functional>
#include <iterator>
#include <memory>
#include <new>
#include <stdexcept>
#include <string>
#include <type_traits>
#include <utility>
#include <vector>

namespace rust {
inline namespace cxxbridge1 {

struct unsafe_bitcopy_t;

namespace {
template <typename T>
class impl;
}

template <typename T>::std::size_t size_of();
template <typename T>::std::size_t align_of();

#ifndef CXXBRIDGE1_RUST_STRING
#define CXXBRIDGE1_RUST_STRING
class String final {
public:
  String() noexcept;
  String(const String &) noexcept;
  String(String &&) noexcept;
  ~String() noexcept;

  String(const std::string &);
  String(const char *);
  String(const char *, std::size_t);
  String(const char16_t *);
  String(const char16_t *, std::size_t);

  static String lossy(const std::string &) noexcept;
  static String lossy(const char *) noexcept;
  static String lossy(const char *, std::size_t) noexcept;
  static String lossy(const char16_t *) noexcept;
  static String lossy(const char16_t *, std::size_t) noexcept;

  String &operator=(const String &) &noexcept;
  String &operator=(String &&) &noexcept;
  String &operator=(const std::string &) &;
  String &operator=(const char *) &;

  explicit operator std::string() const;

  const char *data() const noexcept;
  std::size_t size() const noexcept;
  std::size_t length() const noexcept;
  bool empty() const noexcept;

  const char *c_str() noexcept;

  std::size_t capacity() const noexcept;
  void reserve(size_t additional) noexcept;

  using iterator = char *;
  iterator begin() noexcept;
  iterator end() noexcept;

  using const_iterator = const char *;
  const_iterator begin() const noexcept;
  const_iterator end() const noexcept;
  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;

  bool operator==(const String &) const noexcept;
  bool operator!=(const String &) const noexcept;
  bool operator<(const String &) const noexcept;
  bool operator<=(const String &) const noexcept;
  bool operator>(const String &) const noexcept;
  bool operator>=(const String &) const noexcept;

  void swap(String &) noexcept;

  String(unsafe_bitcopy_t, const String &) noexcept;

private:
  struct lossy_t;
  String(lossy_t, const char *, std::size_t) noexcept;
  String(lossy_t, const char16_t *, std::size_t) noexcept;
  friend void swap(String &lhs, String &rhs) noexcept { lhs.swap(rhs); }

  std::array<std::uintptr_t, 3> repr;
};
#endif // CXXBRIDGE1_RUST_STRING

#ifndef CXXBRIDGE1_RUST_STR
#define CXXBRIDGE1_RUST_STR
class Str final {
public:
  Str() noexcept;
  Str(const String &) noexcept;
  Str(const std::string &);
  Str(const char *);
  Str(const char *, std::size_t);

  Str &operator=(const Str &) &noexcept = default;

  explicit operator std::string() const;

  const char *data() const noexcept;
  std::size_t size() const noexcept;
  std::size_t length() const noexcept;
  bool empty() const noexcept;

  Str substr(size_t pos) const;
  Str substr(size_t pos, size_t len) const;

  using iterator = const char *;
  using const_iterator = const char *;
  const_iterator begin() const noexcept;
  const_iterator end() const noexcept;
  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;

  bool operator==(const Str &) const noexcept;
  bool operator!=(const Str &) const noexcept;
  bool operator<(const Str &) const noexcept;
  bool operator<=(const Str &) const noexcept;
  bool operator>(const Str &) const noexcept;
  bool operator>=(const Str &) const noexcept;

  void swap(Str &) noexcept;

private:
  friend void swap(Str &lhs, Str &rhs) noexcept { lhs.swap(rhs); }

  const char *ptr;
  std::size_t len;
};

inline const char *Str::data() const noexcept { return this->ptr; }

inline std::size_t Str::size() const noexcept { return this->len; }

inline std::size_t Str::length() const noexcept { return this->len; }

inline bool Str::empty() const noexcept { return this->len == 0; }

inline Str::const_iterator Str::begin() const noexcept { return this->ptr; }

inline Str::const_iterator Str::end() const noexcept {
  return this->ptr + this->len;
}

inline Str::const_iterator Str::cbegin() const noexcept { return this->ptr; }

inline Str::const_iterator Str::cend() const noexcept {
  return this->ptr + this->len;
}
#endif // CXXBRIDGE1_RUST_STR

#ifndef CXXBRIDGE1_RUST_SLICE
#define CXXBRIDGE1_RUST_SLICE
template <typename T>
class Slice final {
public:
  using value_type = T;

  Slice() noexcept;
  Slice(T *, std::size_t count) noexcept;

  Slice &operator=(const Slice<T> &) &noexcept = default;

  T *data() const noexcept;
  std::size_t size() const noexcept;
  std::size_t length() const noexcept;
  bool empty() const noexcept;

  T &operator[](std::size_t n) const noexcept;
  T &at(std::size_t n) const;
  T &front() const noexcept;
  T &back() const noexcept;

  Slice(const Slice<T> &) noexcept = default;
  ~Slice() noexcept = default;

  class iterator;
  iterator begin() const noexcept;
  iterator end() const noexcept;

  void swap(Slice &) noexcept;

private:
  friend void swap(Slice &lhs, Slice &rhs) noexcept { lhs.swap(rhs); }

  T *ptr;
  std::size_t len;
};

template <typename T>
class Slice<T>::iterator final {
public:
  using iterator_category = std::random_access_iterator_tag;
  using value_type = T;
  using difference_type = std::ptrdiff_t;
  using pointer = typename std::add_pointer<T>::type;
  using reference = typename std::add_lvalue_reference<T>::type;

  reference operator*() const noexcept;
  pointer operator->() const noexcept;
  reference operator[](difference_type) const noexcept;

  iterator &operator++() noexcept;
  iterator operator++(int) noexcept;
  iterator &operator--() noexcept;
  iterator operator--(int) noexcept;

  iterator &operator+=(difference_type) noexcept;
  iterator &operator-=(difference_type) noexcept;
  iterator operator+(difference_type) const noexcept;
  iterator operator-(difference_type) const noexcept;
  difference_type operator-(const iterator &) const noexcept;

  bool operator==(const iterator &) const noexcept;
  bool operator!=(const iterator &) const noexcept;
  bool operator<(const iterator &) const noexcept;
  bool operator<=(const iterator &) const noexcept;
  bool operator>(const iterator &) const noexcept;
  bool operator>=(const iterator &) const noexcept;

private:
  friend class Slice;
  void *pos;
  std::size_t stride;
};

template <typename T>
Slice<T>::Slice() noexcept : ptr(nullptr), len(0) {}

template <typename T>
Slice<T>::Slice(T *s, std::size_t count) noexcept : ptr(s), len(count) {}

template <typename T>
T *Slice<T>::data() const noexcept {
  return this->ptr;
}

template <typename T>
std::size_t Slice<T>::size() const noexcept {
  return this->len;
}

template <typename T>
std::size_t Slice<T>::length() const noexcept {
  return this->len;
}

template <typename T>
bool Slice<T>::empty() const noexcept {
  return this->len == 0;
}

template <typename T>
T &Slice<T>::operator[](std::size_t n) const noexcept {
  assert(n < this->len);
  auto ptr = static_cast<char *>(static_cast<void *>(this->ptr));
  return *reinterpret_cast<T *>(ptr + size_of<T>() * n);
}

template <typename T>
T &Slice<T>::at(std::size_t n) const {
  if (n >= this->len) {
    panic<std::out_of_range>("rust::Slice index out of range");
  }
  return (*this)[n];
}

template <typename T>
T &Slice<T>::front() const noexcept {
  assert(!this->empty());
  return (*this)[0];
}

template <typename T>
T &Slice<T>::back() const noexcept {
  assert(!this->empty());
  return (*this)[this->len - 1];
}

template <typename T>
typename Slice<T>::iterator::reference
Slice<T>::iterator::operator*() const noexcept {
  auto ptr = static_cast<char *>(this->pos);
  return *reinterpret_cast<T *>(ptr);
}

template <typename T>
typename Slice<T>::iterator::pointer
Slice<T>::iterator::operator->() const noexcept {
  auto ptr = static_cast<char *>(this->pos);
  return reinterpret_cast<T *>(ptr);
}

template <typename T>
typename Slice<T>::iterator::reference Slice<T>::iterator::operator[](
    typename Slice<T>::iterator::difference_type n) const noexcept {
  auto ptr = static_cast<char *>(this->pos) + this->stride * n;
  return *reinterpret_cast<T *>(ptr);
}

template <typename T>
typename Slice<T>::iterator &Slice<T>::iterator::operator++() noexcept {
  this->pos = static_cast<char *>(this->pos) + this->stride;
  return *this;
}

template <typename T>
typename Slice<T>::iterator Slice<T>::iterator::operator++(int) noexcept {
  auto ret = iterator(*this);
  this->pos = static_cast<char *>(this->pos) + this->stride;
  return ret;
}

template <typename T>
typename Slice<T>::iterator &Slice<T>::iterator::operator--() noexcept {
  this->pos = static_cast<char *>(this->pos) - this->stride;
  return *this;
}

template <typename T>
typename Slice<T>::iterator Slice<T>::iterator::operator--(int) noexcept {
  auto ret = iterator(*this);
  this->pos = static_cast<char *>(this->pos) - this->stride;
  return ret;
}

template <typename T>
typename Slice<T>::iterator &Slice<T>::iterator::operator+=(
    typename Slice<T>::iterator::difference_type n) noexcept {
  this->pos = static_cast<char *>(this->pos) + this->stride * n;
  return *this;
}

template <typename T>
typename Slice<T>::iterator &Slice<T>::iterator::operator-=(
    typename Slice<T>::iterator::difference_type n) noexcept {
  this->pos = static_cast<char *>(this->pos) - this->stride * n;
  return *this;
}

template <typename T>
typename Slice<T>::iterator Slice<T>::iterator::operator+(
    typename Slice<T>::iterator::difference_type n) const noexcept {
  auto ret = iterator(*this);
  ret.pos = static_cast<char *>(this->pos) + this->stride * n;
  return ret;
}

template <typename T>
typename Slice<T>::iterator Slice<T>::iterator::operator-(
    typename Slice<T>::iterator::difference_type n) const noexcept {
  auto ret = iterator(*this);
  ret.pos = static_cast<char *>(this->pos) - this->stride * n;
  return ret;
}

template <typename T>
typename Slice<T>::iterator::difference_type
Slice<T>::iterator::operator-(const iterator &other) const noexcept {
  auto n = std::distance(static_cast<char *>(other.pos),
                         static_cast<char *>(this->pos));
  return n / this->stride;
}

template <typename T>
bool Slice<T>::iterator::operator==(const iterator &other) const noexcept {
  return this->pos == other.pos;
}

template <typename T>
bool Slice<T>::iterator::operator!=(const iterator &other) const noexcept {
  return this->pos != other.pos;
}

template <typename T>
bool Slice<T>::iterator::operator<(const iterator &other) const noexcept {
  return this->pos < other.pos;
}

template <typename T>
bool Slice<T>::iterator::operator<=(const iterator &other) const noexcept {
  return this->pos <= other.pos;
}

template <typename T>
bool Slice<T>::iterator::operator>(const iterator &other) const noexcept {
  return this->pos > other.pos;
}

template <typename T>
bool Slice<T>::iterator::operator>=(const iterator &other) const noexcept {
  return this->pos >= other.pos;
}

template <typename T>
typename Slice<T>::iterator Slice<T>::begin() const noexcept {
  iterator it;
  it.pos = static_cast<void *>(this->ptr);
  it.stride = size_of<T>();
  return it;
}

template <typename T>
typename Slice<T>::iterator Slice<T>::end() const noexcept {
  iterator it = this->begin();
  it.pos = static_cast<char *>(it.pos) + it.stride * this->len;
  return it;
}

template <typename T>
void Slice<T>::swap(Slice &rhs) noexcept {
  std::swap(*this, rhs);
}
#endif // CXXBRIDGE1_RUST_SLICE

#ifndef CXXBRIDGE1_RUST_BOX
#define CXXBRIDGE1_RUST_BOX
template <typename T>
class Box final {
public:
  using element_type = T;
  using const_pointer =
      typename std::add_pointer<typename std::add_const<T>::type>::type;
  using pointer = typename std::add_pointer<T>::type;

  Box() = delete;
  Box(Box &&) noexcept;
  ~Box() noexcept;

  explicit Box(const T &);
  explicit Box(T &&);

  Box &operator=(Box &&) &noexcept;

  const T *operator->() const noexcept;
  const T &operator*() const noexcept;
  T *operator->() noexcept;
  T &operator*() noexcept;

  template <typename... Fields>
  static Box in_place(Fields &&...);

  void swap(Box &) noexcept;

  static Box from_raw(T *) noexcept;

  T *into_raw() noexcept;

  /* Deprecated, use into_raw */ T *as_raw() noexcept;

private:
  class uninit;
  class allocation;
  Box(uninit) noexcept;
  void drop() noexcept;

  friend void swap(Box &lhs, Box &rhs) noexcept { lhs.swap(rhs); }

  T *ptr;
};

template <typename T>
class Box<T>::uninit {};

template <typename T>
class Box<T>::allocation {
  static T *alloc() noexcept;
  static void dealloc(T *) noexcept;

public:
  allocation() noexcept : ptr(alloc()) {}
  ~allocation() noexcept {
    if (this->ptr) {
      dealloc(this->ptr);
    }
  }
  T *ptr;
};

template <typename T>
Box<T>::Box(Box &&other) noexcept : ptr(other.ptr) {
  other.ptr = nullptr;
}

template <typename T>
Box<T>::Box(const T &val) {
  allocation alloc;
  ::new (alloc.ptr) T(val);
  this->ptr = alloc.ptr;
  alloc.ptr = nullptr;
}

template <typename T>
Box<T>::Box(T &&val) {
  allocation alloc;
  ::new (alloc.ptr) T(std::move(val));
  this->ptr = alloc.ptr;
  alloc.ptr = nullptr;
}

template <typename T>
Box<T>::~Box() noexcept {
  if (this->ptr) {
    this->drop();
  }
}

template <typename T>
Box<T> &Box<T>::operator=(Box &&other) &noexcept {
  if (this->ptr) {
    this->drop();
  }
  this->ptr = other.ptr;
  other.ptr = nullptr;
  return *this;
}

+emplate <typename T>
const T *Box<T>::operator->() const noexcept {
  return this->ptr;
}

template <typename T>
const T &Box<T>::operator*() const noexcept {
  return *this->ptr;
}

template <typename T>
T *Box<T>::operator->() noexcept {
  return this->ptr;
}

template <typename T>
T &Box<T>::operator*() noexcept {
  return *this->ptr;
}

template <typename T>
template <typename... Fields>
Box<T> Box<T>::in_place(Fields &&...fields) {
  allocation alloc;
  auto ptr = alloc.ptr;
  ::new (ptr) T{std::forward<Fields>(fields)...};
  alloc.ptr = nullptr;
  return from_raw(ptr);
}

template <typename T>
void Box<T>::swap(Box &rhs) noexcept {
  using std::swap;
  swap(this->ptr, rhs.ptr);
}

template <typename T>
Box<T> Box<T>::from_raw(T *raw) noexcept {
  Box box = Box(uninit{});
  box.ptr = raw;
  return box;
}

template <typename T>
T *Box<T>::into_raw() noexcept {
  T *raw = this->ptr;
  this->ptr = nullptr;
  return raw;
}

template <typename T>
T *Box<T>::as_raw() noexcept {
  return this->into_raw();
}

template <typename T>
Box<T>::Box(uninit) noexcept {}
#endif // CXXBRIDGE1_RUST_BOX

#ifndef CXXBRIDGE1_RUST_VEC
#define CXXBRIDGE1_RUST_VEC
template <typename T>
class Vec final {
public:
  using value_type = T;

  Vec() noexcept;
  Vec(std::initializer_list<T>);
  Vec(const Vec &);
  Vec(Vec &&) noexcept;
  ~Vec() noexcept;

  Vec &operator=(Vec &&) &noexcept;
  Vec &operator=(const Vec &) &;

  std::size_t size() const noexcept;
  bool empty() const noexcept;
  const T *data() const noexcept;
  T *data() noexcept;
  std::size_t capacity() const noexcept;

  const T &operator[](std::size_t n) const noexcept;
  const T &at(std::size_t n) const;
  const T &front() const noexcept;
  const T &back() const noexcept;

  T &operator[](std::size_t n) noexcept;
  T &at(std::size_t n);
  T &front() noexcept;
  T &back() noexcept;

  void reserve(std::size_t new_cap);
  void push_back(const T &value);
  void push_back(T &&value);
  template <typename... Args>
  void emplace_back(Args &&...args);
  void truncate(std::size_t len);
  void clear();

  using iterator = typename Slice<T>::iterator;
  iterator begin() noexcept;
  iterator end() noexcept;

  using const_iterator = typename Slice<const T>::iterator;
  const_iterator begin() const noexcept;
  const_iterator end() const noexcept;
  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;

  void swap(Vec &) noexcept;

  Vec(unsafe_bitcopy_t, const Vec &) noexcept;

private:
  void reserve_total(std::size_t new_cap) noexcept;
  void set_len(std::size_t len) noexcept;
  void drop() noexcept;

  friend void swap(Vec &lhs, Vec &rhs) noexcept { lhs.swap(rhs); }

  std::array<std::uintptr_t, 3> repr;
};

template <typename T>
Vec<T>::Vec(std::initializer_list<T> init) : Vec{} {
  this->reserve_total(init.size());
  std::move(init.begin(), init.end(), std::back_inserter(*this));
}

template <typename T>
Vec<T> &Vec<T>::operator=(Vec &&other) &noexcept {
  this->drop();
  this->repr = other.repr;
  new (&other) Vec();
  return *this;
}

template <typename T>
Vec<T> &Vec<T>::operator=(const Vec &other) & {
  if (this != &other) {
    this->drop();
    new (this) Vec(other);
  }
  return *this;
}

template <typename T>
bool Vec<T>::empty() const noexcept {
  return this->size() == 0;
}

template <typename T>
T &Vec<T>::operator[](std::size_t n) noexcept {
  assert(n < this->size());
  auto data = reinterpret_cast<char *>(this->data());
  return *reinterpret_cast<T *>(data + n * size_of<T>());
}

template <typename T>
const T &Vec<T>::operator[](std::size_t n) const noexcept {
  assert(n < this->size());
  auto data = reinterpret_cast<const char *>(this->data());
  return *reinterpret_cast<const T *>(data + n * size_of<T>());
}

template <typename T>
const T &Vec<T>::at(std::size_t n) const {
  if (n >= this->size()) {
    panic<std::out_of_range>("rust::Vec index out of range");
  }
  return (*this)[n];
}

template <typename T>
T &Vec<T>::at(std::size_t n) {
  if (n >= this->size()) {
    panic<std::out_of_range>("rust::Vec index out of range");
  }
  return (*this)[n];
}

template <typename T>
const T &Vec<T>::front() const noexcept {
  assert(!this->empty());
  return (*this)[0];
}

template <typename T>
T &Vec<T>::front() noexcept {
  assert(!this->empty());
  return (*this)[0];
}

template <typename T>
const T &Vec<T>::back() const noexcept {
  assert(!this->empty());
  return (*this)[this->size() - 1];
}

template <typename T>
T &Vec<T>::back() noexcept {
  assert(!this->empty());
  return (*this)[this->size() - 1];
}

template <typename T>
void Vec<T>::reserve(std::size_t new_cap) {
  this->reserve_total(this->size() + new_cap);
}

template <typename T>
void Vec<T>::push_back(const T &value) {
  this->emplace_back(value);
}

template <typename T>
void Vec<T>::push_back(T &&value) {
  this->emplace_back(std::move(value));
}

template <typename T>
template <typename... Args>
void Vec<T>::emplace_back(Args &&...args) {
  auto size = this->size();
  this->reserve_total(size + 1);
  ::new (reinterpret_cast<T *>(reinterpret_cast<char *>(this->data()) +
                               size * size_of<T>()))
      T(std::forward<Args>(args)...);
  this->set_len(size + 1);
}

template <typename T>
void Vec<T>::clear() {
  this->truncate(0);
}

template <typename T>
typename Vec<T>::iterator Vec<T>::begin() noexcept {
  return Slice<T>(this->data(), this->size()).begin();
}

template <typename T>
typename Vec<T>::iterator Vec<T>::end() noexcept {
  return Slice<T>(this->data(), this->size()).end();
}

template <typename T>
typename Vec<T>::const_iterator Vec<T>::begin() const noexcept {
  return this->cbegin();
}

template <typename T>
typename Vec<T>::const_iterator Vec<T>::end() const noexcept {
  return this->cend();
}

template <typename T>
typename Vec<T>::const_iterator Vec<T>::cbegin() const noexcept {
  return Slice<const T>(this->data(), this->size()).begin();
}

template <typename T>
typename Vec<T>::const_iterator Vec<T>::cend() const noexcept {
  return Slice<const T>(this->data(), this->size()).end();
}

template <typename T>
void Vec<T>::swap(Vec &rhs) noexcept {
  using std::swap;
  swap(this->repr, rhs.repr);
}

template <typename T>
Vec<T>::Vec(unsafe_bitcopy_t, const Vec &bits) noexcept : repr(bits.repr) {}
#endif // CXXBRIDGE1_RUST_VEC

template <typename Exception>
void panic [[noreturn]] (const char *msg);

#define CXXBRIDGE1_PANIC(msg, ret)                                            \
  do {                                                                         \
    ::rust::panic<::rust::Error>(msg);                                        \
    ret;                                                                       \
  } while (false)

class Error final : public std::exception {
public:
  Error(const Error &);
  Error(Error &&) noexcept;
  ~Error() noexcept override;

  Error &operator=(const Error &) &;
  Error &operator=(Error &&) &noexcept;

  const char *what() const noexcept override;

private:
  Error() noexcept = default;
  friend impl<Error>;
  const char *msg;
  std::size_t len;
};

std::ostream &operator<<(std::ostream &, const Error &);

using Fn = void(*)();

template <typename Ret, typename... Args>
using TryFn = Ret(*)(Args..., ::rust::Error *err) noexcept;

#ifndef CXXBRIDGE1_UNIQUE_PTR
#define CXXBRIDGE1_UNIQUE_PTR
template <typename T>
class UniquePtr final {
public:
  using element_type = T;
  using pointer = element_type *;
  using const_pointer = typename std::add_const<element_type>::type *;

  UniquePtr() noexcept;
  UniquePtr(std::nullptr_t) noexcept;
  UniquePtr(const UniquePtr &) = delete;
  UniquePtr(UniquePtr &&) noexcept;
  ~UniquePtr() noexcept;

  UniquePtr &operator=(const UniquePtr &) = delete;
  UniquePtr &operator=(UniquePtr &&) &noexcept;
  UniquePtr &operator=(std::nullptr_t) &noexcept;

  const T *get() const noexcept;
  T *get() noexcept;
  const T *operator->() const noexcept;
  T *operator->() noexcept;
  const T &operator*() const noexcept;
  T &operator*() noexcept;

  void swap(UniquePtr &) noexcept;
  void reset(T * = nullptr) noexcept;
  T *release() noexcept;

  explicit operator bool() const noexcept;

  static UniquePtr from_raw(T *) noexcept;

private:
  using deleter = void (*)(T *);
  UniquePtr(T *, deleter) noexcept;
  friend void swap(UniquePtr &lhs, UniquePtr &rhs) noexcept { lhs.swap(rhs); }

  T *ptr;
  deleter del;
};

template <typename T>
UniquePtr<T>::UniquePtr() noexcept : ptr(nullptr), del(nullptr) {}

template <typename T>
UniquePtr<T>::UniquePtr(std::nullptr_t) noexcept : ptr(nullptr), del(nullptr) {}

template <typename T>
UniquePtr<T>::UniquePtr(UniquePtr &&other) noexcept : ptr(other.ptr), del(other.del) {
  other.ptr = nullptr;
  other.del = nullptr;
}

template <typename T>
UniquePtr<T>::~UniquePtr() noexcept {
  if (this->ptr) {
    this->del(this->ptr);
  }
}

template <typename T>
UniquePtr<T> &UniquePtr<T>::operator=(UniquePtr &&other) &noexcept {
  if (this->ptr) {
    this->del(this->ptr);
  }
  this->ptr = other.ptr;
  this->del = other.del;
  other.ptr = nullptr;
  other.del = nullptr;
  return *this;
}

template <typename T>
UniquePtr<T> &UniquePtr<T>::operator=(std::nullptr_t) &noexcept {
  if (this->ptr) {
    this->del(this->ptr);
  }
  this->ptr = nullptr;
  this->del = nullptr;
  return *this;
}

template <typename T>
const T *UniquePtr<T>::get() const noexcept {
  return this->ptr;
}

template <typename T>
T *UniquePtr<T>::get() noexcept {
  return this->ptr;
}

template <typename T>
const T *UniquePtr<T>::operator->() const noexcept {
  return this->ptr;
}

template <typename T>
T *UniquePtr<T>::operator->() noexcept {
  return this->ptr;
}

template <typename T>
const T &UniquePtr<T>::operator*() const noexcept {
  return *this->ptr;
}

template <typename T>
T &UniquePtr<T>::operator*() noexcept {
  return *this->ptr;
}

template <typename T>
void UniquePtr<T>::swap(UniquePtr &rhs) noexcept {
  using std::swap;
  swap(this->ptr, rhs.ptr);
  swap(this->del, rhs.del);
}

template <typename T>
void UniquePtr<T>::reset(T *ptr) noexcept {
  this->~UniquePtr();
  ::new (this) UniquePtr(ptr, this->del);
}

template <typename T>
T *UniquePtr<T>::release() noexcept {
  T *ptr = this->ptr;
  this->ptr = nullptr;
  this->del = nullptr;
  return ptr;
}

template <typename T>
UniquePtr<T>::operator bool() const noexcept {
  return this->ptr != nullptr;
}

template <typename T>
UniquePtr<T> UniquePtr<T>::from_raw(T *raw) noexcept {
  auto deleter = [](T *ptr) {
    impl<T>::drop_in_place(ptr);
    impl<T>::dealloc(ptr);
  };
  return UniquePtr(raw, deleter);
}

template <typename T>
UniquePtr<T>::UniquePtr(T *raw, deleter del) noexcept : ptr(raw), del(del) {}
#endif // CXXBRIDGE1_UNIQUE_PTR

#ifndef CXXBRIDGE1_SHARED_PTR
#define CXXBRIDGE1_SHARED_PTR
template <typename T>
class SharedPtr final {
public:
  using element_type = T;

  SharedPtr() noexcept;
  SharedPtr(std::nullptr_t) noexcept;
  SharedPtr(const SharedPtr &) noexcept;
  SharedPtr(SharedPtr &&) noexcept;
  ~SharedPtr() noexcept;

  SharedPtr &operator=(const SharedPtr &) &noexcept;
  SharedPtr &operator=(SharedPtr &&) &noexcept;

  const T *get() const noexcept;
  T *get() noexcept;
  const T *operator->() const noexcept;
  T *operator->() noexcept;
  const T &operator*() const noexcept;
  T &operator*() noexcept;

  void swap(SharedPtr &) noexcept;
  void reset() noexcept;

  explicit operator bool() const noexcept;

  static SharedPtr from_raw(T *) noexcept;

private:
  using deleter = void (*)(T *);
  SharedPtr(T *, deleter) noexcept;
  friend void swap(SharedPtr &lhs, SharedPtr &rhs) noexcept { lhs.swap(rhs); }

  std::shared_ptr<T> ptr;
};

template <typename T>
SharedPtr<T>::SharedPtr() noexcept = default;

template <typename T>
SharedPtr<T>::SharedPtr(std::nullptr_t) noexcept : ptr(nullptr) {}

template <typename T>
SharedPtr<T>::SharedPtr(const SharedPtr &other) noexcept : ptr(other.ptr) {}

template <typename T>
SharedPtr<T>::SharedPtr(SharedPtr &&other) noexcept : ptr(std::move(other.ptr)) {}

template <typename T>
SharedPtr<T>::~SharedPtr() noexcept = default;

template <typename T>
SharedPtr<T> &SharedPtr<T>::operator=(const SharedPtr &other) &noexcept {
  this->ptr = other.ptr;
  return *this;
}

template <typename T>
SharedPtr<T> &SharedPtr<T>::operator=(SharedPtr &&other) &noexcept {
  this->ptr = std::move(other.ptr);
  return *this;
}

template <typename T>
const T *SharedPtr<T>::get() const noexcept {
  return this->ptr.get();
}

template <typename T>
T *SharedPtr<T>::get() noexcept {
  return this->ptr.get();
}

template <typename T>
const T *SharedPtr<T>::operator->() const noexcept {
  return this->ptr.get();
}

template <typename T>
T *SharedPtr<T>::operator->() noexcept {
  return this->ptr.get();
}

template <typename T>
const T &SharedPtr<T>::operator*() const noexcept {
  return *this->ptr;
}

template <typename T>
T &SharedPtr<T>::operator*() noexcept {
  return *this->ptr;
}

template <typename T>
void SharedPtr<T>::swap(SharedPtr &rhs) noexcept {
  this->ptr.swap(rhs.ptr);
}

template <typename T>
void SharedPtr<T>::reset() noexcept {
  this->ptr.reset();
}

template <typename T>
SharedPtr<T>::operator bool() const noexcept {
  return static_cast<bool>(this->ptr);
}

template <typename T>
SharedPtr<T> SharedPtr<T>::from_raw(T *raw) noexcept {
  auto deleter = [](T *ptr) {
    impl<T>::drop_in_place(ptr);
    impl<T>::dealloc(ptr);
  };
  return SharedPtr(raw, deleter);
}

template <typename T>
SharedPtr<T>::SharedPtr(T *raw, deleter del) noexcept : ptr(raw, del) {}
#endif // CXXBRIDGE1_SHARED_PTR

} // namespace cxxbridge1
} // namespace rust