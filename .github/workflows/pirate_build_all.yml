name: Pirated CI - Build and Test all Platforms

on: [push, pull_request]

env:
  srcdir: ./src
  builddir: ./src

jobs:
  build-and-test-linux-x86_64:
    name: Build and Test Pirated Daemon (Linux x86_64)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Show commit hash (Linux x86_64)
      run: git rev-parse HEAD

    - name: Install dependencies (Linux x86_64)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libtool autotools-dev automake pkg-config libssl-dev \
          libevent-dev bsdmainutils python3 libboost-system-dev \
          libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev \
          libboost-test-dev libboost-thread-dev libcurl4-openssl-dev \
          python3-zmq libsodium-dev bison curl zip dos2unix

    - name: Ensure LF line endings (Linux x86_64)
      shell: bash
      run: |
        echo "Attempting to convert .mk files to LF..."
        find . -type f -name '*.mk' -exec dos2unix {} \;
        echo "Attempting to convert Makefiles to LF..."
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        echo "Attempting to convert .sh files to LF..."
        find . -type f -name '*.sh' -exec dos2unix {} \;
        echo "Conversion attempt finished."

    - name: Display critical file content (Linux x86_64)
      shell: bash
      run: |
        echo "--- Content of depends/funcs.mk (fetch_file_inner) on Linux x86_64 runner ---"
        if [ -f depends/funcs.mk ]; then
          awk '/define fetch_file_inner/,/endef/' depends/funcs.mk
          echo "--- Content of depends/funcs.mk (configure block) on Linux x86_64 runner ---"
          awk '/^\$\(\$(\1)_configured\):/{p=1} p; /^\$\(AT\)touch \$\$@/{p=0}' depends/funcs.mk
        else
          echo "depends/funcs.mk not found."
        fi
        echo "--------------------------------------------------------------------"

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Make build script executable
      run: chmod +x zcutil/build.sh
    
    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh

    - name: Prepare for Rust linting
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep
        
    
        
    - name: Build Pirated Daemon (Linux x86_64)
      run: |
        ./zcutil/build.sh -j$(nproc)

    - name: Run C++ tests (Linux x86_64)
      run: make check

    - name: Display test-suite.log on failure (Linux x86_64)
      if: failure()
      run: |
        echo "Attempting to display src/test-suite.log..."
        if [ -f src/test-suite.log ]; then
          cat src/test-suite.log
        else
          echo "src/test-suite.log not found."
          echo "Listing src directory:"
          ls -la src
        fi

    # - name: Run Python utility tests (Linux x86_64)
    #   working-directory: src
    #   env:
    #     PYTHONPATH: ./test
    #     SRCDIR: ./
    #     BUILDDIR: ./
    #   run: |
    #     python3 test/wallet-utility.py

    # - name: Run Python functional tests (Linux x86_64)
    #   env:
    #     PATH: "${{ github.workspace }}/src:$PATH"
    #   run: test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (Linux x86_64 Daemon)
      run: |
        strip src/pirated
        strip src/pirate-cli
        strip src/pirate-tx
        strip src/wallet/wallet-utility
        zip --junk-paths pirate-linux.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        
    - name: Archive Daemon Binaries (Linux x86_64)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-linux-x86_64-daemon
        path: pirate-linux.zip

  build-and-test-macos-arm64:
    name: Build and Test Pirated Daemon (macOS ARM64)
    runs-on: macos-latest 

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (macOS)
      run: |
        brew install autoconf automake libtool pkg-config boost zeromq libsodium coreutils python3 curl zip dos2unix

    - name: Ensure LF line endings for Makefiles and scripts (macOS)
      shell: bash
      run: |
        echo "Attempting to convert .mk files to LF..."
        find . -type f -name '*.mk' -exec dos2unix {} \;
        echo "Attempting to convert Makefiles to LF..."
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        echo "Attempting to convert .sh files to LF..."
        find . -type f -name '*.sh' -exec dos2unix {} \;
        echo "Conversion attempt finished."

    - name: Display critical file content (macOS)
      shell: bash
      run: |
        echo "--- Content of depends/funcs.mk (fetch_file_inner) on macOS runner ---"
        if [ -f depends/funcs.mk ]; then
          awk '/define fetch_file_inner/,/endef/' depends/funcs.mk
          echo "--- Content of depends/funcs.mk (configure block) on macOS runner ---"
          awk '/^\$\(\$(\1)_configured\):/{p=1} p; /^\$\(AT\)touch \$\$@/{p=0}' depends/funcs.mk
        else
          echo "depends/funcs.mk not found."
        fi
        echo "--------------------------------------------------------------------"

    - name: Install Rust (stable with aarch64-apple-darwin target)
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin

    - name: Make build script executable
      run: chmod +x zcutil/build-mac.sh

    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh
      
    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    

    - name: Build Pirated Daemon (macOS)
      run: |
        ./zcutil/build-mac.sh -j$(sysctl -n hw.ncpu)

    - name: Run C++ tests (macOS)
      run: make check

    - name: Display config.log on failure (macOS)
      if: failure()
      run: |
        echo "Attempting to display config.log..."
        if [ -f config.log ]; then
          cat config.log
        else
          echo "config.log not found."
          echo "Listing current directory:"
          ls -la
        fi

    # - name: Run Python utility tests (macOS)
    #   working-directory: src
    #   env:
    #     PYTHONPATH: ./test
    #     SRCDIR: ./
    #     BUILDDIR: ./
    #   run: |
    #     python3 test/wallet-utility.py

    # - name: Run Python functional tests (macOS)
    #   env:
    #     PATH: "${{ github.workspace }}/src:$PATH"
    #   run: python3 test/functional/test_runner.py --jobs=$(sysctl -n hw.ncpu)
        
    - name: Strip and Zip Binaries (macOS Daemon)
      run: |
        strip src/pirated
        strip src/pirate-cli
        strip src/pirate-tx
        strip src/wallet/wallet-utility
        zip --junk-paths pirate-macos.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        
    - name: Archive Daemon Binaries (macOS)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-macos-daemon
        path: pirate-macos.zip

  build-and-test-windows:
    name: Build and Test Pirated Daemon (Windows)
    runs-on: windows-latest 

    steps:
    - uses: actions/checkout@v3

    - name: Ensure LF line endings for Makefiles and scripts (Windows)
      shell: bash
      run: |
        echo "Attempting to convert .mk files to LF..."
        find . -type f -name '*.mk' -exec dos2unix {} \;
        echo "Attempting to convert Makefiles to LF..."
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        echo "Attempting to convert .sh files to LF..."
        find . -type f -name '*.sh' -exec dos2unix {} \;
        echo "Conversion attempt finished."

    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64 
        update: true
        path-type: inherit
        install: >-
          git make autoconf automake libtool pkg-config mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-boost mingw-w64-x86_64-python3 mingw-w64-x86_64-openssl 
          mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-curl zip

    - name: Display critical file line endings and content (Windows)
      shell: bash
      run: |
        echo "--- Verifying line endings for depends/funcs.mk (using od -c) ---"
        if [ -f depends/funcs.mk ]; then
          od -c depends/funcs.mk | head -n 30 || true
        else
          echo "depends/funcs.mk not found for od -c."
        fi
        echo "--- Content of depends/funcs.mk (fetch_file_inner) on Windows runner ---"
        if [ -f depends/funcs.mk ]; then
          awk '/define fetch_file_inner/,/endef/' depends/funcs.mk
          echo "--- Content of depends/funcs.mk (configure block) on Windows runner ---"
          awk '/^\$\(\$(\1)_configured\):/{p=1} p; /^\$\(AT\)touch \$\$@/{p=0}' depends/funcs.mk
        else
          echo "depends/funcs.mk not found for awk."
        fi
        echo "-----------------------------------------------------------------"

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable
    - name: Expose Cargo on Windows PATH for all shells
      run: |
        echo "$Env:USERPROFILE\.cargo\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
        "CARGO_HOME=$Env:USERPROFILE\.cargo" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Mount Windows Cargo into MSYS2 and Setup for Depends
      shell: msys2 {0}
      run: |
        # Set up MSYS2 environment with cargo
        mkdir -p "$HOME"
        # Skipping symlink; rely on CARGO_HOME and PATH instead
        
        # Set up cargo environment variables for MSYS2
        export CARGO_HOME=$(cygpath -u "$USERPROFILE")/.cargo
        export PATH="$CARGO_HOME/bin:$PATH"
        
        echo "=== Cargo Environment Setup ==="
        echo "CARGO_HOME: $CARGO_HOME"
        echo "PATH: $PATH"
        
        # Verify cargo is accessible
        echo "=== Cargo Verification ==="
        which cargo || echo "cargo not found in PATH"
        if command -v cargo >/dev/null 2>&1; then
          cargo --version
          echo "Cargo is accessible via PATH"
        else
          echo "ERROR: Cargo not accessible via PATH"
          exit 1
        fi
        
        # Ensure cargo will be available for the depends system
        echo "=== Setting up cargo for depends system ==="
        mkdir -p depends/x86_64-w64-mingw64/native/bin
        
        # Find and copy cargo binary
        CARGO_BINARY=""
        if [ -f "$CARGO_HOME/bin/cargo.exe" ]; then
          CARGO_BINARY="$CARGO_HOME/bin/cargo.exe"
        elif [ -f "$CARGO_HOME/bin/cargo" ]; then
          CARGO_BINARY="$CARGO_HOME/bin/cargo"
        elif command -v cargo >/dev/null 2>&1; then
          CARGO_BINARY=$(which cargo)
        fi
        
        if [ -n "$CARGO_BINARY" ] && [ -f "$CARGO_BINARY" ]; then
          echo "Copying cargo binary to depends location: $CARGO_BINARY"
          cp "$CARGO_BINARY" depends/x86_64-w64-mingw64/native/bin/cargo
          chmod +x depends/x86_64-w64-mingw64/native/bin/cargo
          echo "Cargo setup complete"
          
          # Verify the setup
          depends/x86_64-w64-mingw64/native/bin/cargo --version
        else
          echo "ERROR: Cannot find a valid cargo binary"
          exit 1
        fi
        
        # Make cargo available globally for all subsequent steps
        echo "CARGO_HOME=$CARGO_HOME" >> $GITHUB_ENV
        echo "$CARGO_HOME/bin" >> $GITHUB_PATH
        echo "$(pwd)/depends/x86_64-w64-mingw64/native/bin" >> $GITHUB_PATH

    - name: Make build script executable and Fetch Zcash Params (Windows)
      shell: msys2 {0}
      run: |
        chmod +x zcutil/build-win.sh
        ./zcutil/fetch-params.sh
        
    - name: Prepare for Rust build (Windows)
      shell: msys2 {0}
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep
        
    

    - name: Install build dependencies (Windows)
      shell: msys2 {0}
      run: |
        pacman -S --noconfirm --needed \
          mingw-w64-x86_64-toolchain \
          mingw-w64-x86_64-cmake \
          mingw-w64-x86_64-boost \
          mingw-w64-x86_64-openssl \
          mingw-w64-x86_64-libevent \
          mingw-w64-x86_64-zeromq \
          mingw-w64-x86_64-miniupnpc \
          mingw-w64-x86_64-protobuf \
          mingw-w64-x86_64-qrencode \
          mingw-w64-x86_64-libsodium \
          curl \
          unzip \
          zip \
          patch

    - name: Prepare directories for Windows build
      shell: msys2 {0}
      run: |
        echo "--- Creating necessary directories for Windows build ---"
        mkdir -p depends/sources/download-stamps
        mkdir -p depends/work/download/native_ccache-3.7.4
        mkdir -p depends/work/build
        mkdir -p depends/SDKs
        mkdir -p depends/sdk-sources
        echo "--- Directories created ---"
        
    
        
    - name: Debug Make in MSYS2 (Windows)
      shell: msys2 {0}
      run: |
        # Set up cargo for this step
        mkdir -p "$HOME"
        # Skipping symlink; rely on CARGO_HOME and PATH instead
        export CARGO_HOME=$(cygpath -u "$USERPROFILE")/.cargo
        export PATH="$CARGO_HOME/bin:$PATH"
        
        # Ensure cargo is available for depends
        mkdir -p depends/x86_64-w64-mingw64/native/bin
        if command -v cargo >/dev/null 2>&1; then
          cp "$(which cargo)" depends/x86_64-w64-mingw64/native/bin/cargo
          chmod +x depends/x86_64-w64-mingw64/native/bin/cargo
          echo "Cargo available at: $(which cargo)"
          depends/x86_64-w64-mingw64/native/bin/cargo --version
        else
          echo "ERROR: Cargo not found"
          exit 1
        fi
        
        echo "--- Debugging make command ---"
        cd depends
        echo "Current directory: $(pwd)"
        echo "Listing directory contents:"
        ls -la
        echo "Output of 'type make':"
        type make
        echo "Attempting to run 'make --version':"
        make --version
        echo "Value of build_DOWNLOAD variable (safe query):"
        make -Rrqp HOST=x86_64-w64-mingw64 2>/dev/null | sed -n 's/^build_DOWNLOAD\s*=.*/&/p' | cat || true
        echo "Inspecting make database safely (no recipe execution):"
        # Print the computed database and variables without triggering any recipes
        make -Rrqp HOST=x86_64-w64-mingw64 2>/dev/null | sed -n '1,200p' | cat || true
        echo "--- End Debugging make command ---"
        cd ..

    - name: Build Pirated Daemon (Windows)
      shell: msys2 {0}
      run: |
        # Set up cargo for this step
        mkdir -p "$HOME"
        # Skipping symlink; rely on CARGO_HOME and PATH instead
        export CARGO_HOME=$(cygpath -u "$USERPROFILE")/.cargo
        export PATH="$CARGO_HOME/bin:$PATH"
        
        # Ensure cargo is available for depends
        mkdir -p depends/x86_64-w64-mingw64/native/bin
        if command -v cargo >/dev/null 2>&1; then
          cp "$(which cargo)" depends/x86_64-w64-mingw64/native/bin/cargo
          chmod +x depends/x86_64-w64-mingw64/native/bin/cargo
          echo "Cargo available at: $(which cargo)"
          depends/x86_64-w64-mingw64/native/bin/cargo --version
        else
          echo "ERROR: Cargo not found"
          exit 1
        fi
        
        # Set environment variables to help with downloads
        export CURL_RETRIES=5
        export DOWNLOAD_CONNECT_TIMEOUT=30
        export DOWNLOAD_TIMEOUT=600
        
        # Build with more verbose output and fewer jobs to avoid resource issues
        ./zcutil/build-win.sh -j2 V=1

    - name: Run C++ tests (Windows)
      shell: msys2 {0}
      run: make check

    # - name: Run Python utility tests (Windows)
    #   working-directory: src
    #   env:
    #     PYTHONPATH: test
    #     SRCDIR: ./
    #     BUILDDIR: ./
    #   shell: msys2 {0}
    #   run: |
    #     python3 test/wallet-utility.py

    # - name: Run Python functional tests (Windows)
    #   env:
    #     PATH: "/c/hostedtoolcache/windows/Python/3.9.9/x64:/d/a/pirate/pirate/src:/mingw64/bin:/usr/bin"
    #   shell: msys2 {0}
    #   run: python3 test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (Windows Daemon)
      shell: msys2 {0}
      run: |
        strip src/pirated.exe
        strip src/pirate-cli.exe
        strip src/pirate-tx.exe
        strip src/wallet/wallet-utility.exe
        zip --junk-paths pirate-win.zip src/pirated.exe src/pirate-cli.exe src/pirate-tx.exe src/wallet/wallet-utility.exe
        
    - name: Archive Daemon Binaries (Windows)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-win-daemon
        path: pirate-win.zip

  build-daemon-linux-aarch64:
    name: Build Pirated Daemon (Linux AArch64 Cross-Compile)
    runs-on: ubuntu-latest 

    steps:
    - uses: actions/checkout@v3

    - name: Show commit hash (Linux AArch64)
      run: git rev-parse HEAD

    - name: Install dependencies (Ubuntu for AArch64 cross-compile)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential pkg-config autoconf libtool automake bsdmainutils \
          python3 curl g++-aarch64-linux-gnu gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu zip dos2unix

    - name: Ensure LF line endings (Linux AArch64)
      shell: bash
      run: |
        echo "Attempting to convert .mk files to LF..."
        find . -type f -name '*.mk' -exec dos2unix {} \;
        echo "Attempting to convert Makefiles to LF..."
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        echo "Attempting to convert .sh files to LF..."
        find . -type f -name '*.sh' -exec dos2unix {} \;
        echo "Conversion attempt finished."

    - name: Display critical file content (Linux AArch64)
      shell: bash
      run: |
        echo "--- Content of depends/funcs.mk (fetch_file_inner) on Linux AArch64 runner ---"
        if [ -f depends/funcs.mk ]; then
          awk '/define fetch_file_inner/,/endef/' depends/funcs.mk
          echo "--- Content of depends/funcs.mk (configure block) on Linux AArch64 runner ---"
          awk '/^\$\(\$(\1)_configured\):/{p=1} p; /^\$\(AT\)touch \$\$@/{p=0}' depends/funcs.mk
        else
          echo "depends/funcs.mk not found."
        fi
        echo "--------------------------------------------------------------------"

    - name: Install Rust (stable, AArch64 target)
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-unknown-linux-gnu

    - name: Verify and ensure AArch64 target is available
      run: |
        # Verify target is installed
        echo "=== Rust toolchain info ==="
        rustup show
        echo "=== Installed targets ==="
        rustup target list --installed
        echo "=== Checking for AArch64 target ==="
        if rustup target list --installed | grep -q aarch64-unknown-linux-gnu; then
          echo "AArch64 target found"
        else
          echo "AArch64 target not found, installing..."
          rustup target add aarch64-unknown-linux-gnu
          rustup target list --installed | grep aarch64-unknown-linux-gnu
        fi
        echo "=== Final verification ==="
        rustc --print target-list | grep aarch64-unknown-linux-gnu
        echo "AArch64 target setup complete"

    - name: Make build script executable
      run: chmod +x zcutil/build-arm.sh

    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    - name: Configure Cargo target for Linux AArch64
      run: |
        # Minimal .cargo/config for AArch64, patching bellman & setting target
        rm -f .cargo/config
        echo "# Minimal Cargo config for AArch64" > .cargo/config
        echo "[target.aarch64-unknown-linux-gnu]" >> .cargo/config
        echo "linker = \"aarch64-linux-gnu-gcc\"" >> .cargo/config
        echo "ar = \"aarch64-linux-gnu-ar\"" >> .cargo/config
        cat .cargo/config

    - name: Build Pirated Daemon (AArch64 Cross-Compile)
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: aarch64-linux-gnu-ar
        CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
        CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
        AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
        RUSTFLAGS: --cfg=rust_secp_no_symbol_renaming -L native=/home/runner/work/pirate/pirate/src/secp256k1/.libs
      run: |
        # Ensure cargo is available for the depends system
        CARGO_BIN_PATH="$(command -v cargo)"
        if [ -z "$CARGO_BIN_PATH" ]; then
          echo "ERROR: Cargo binary not found in PATH" >&2
          exit 1
        fi
        echo "Found cargo at: $CARGO_BIN_PATH"
        # Verify the target is installed
        rustup target list --installed | grep aarch64-unknown-linux-gnu || {
          echo "ERROR: aarch64-unknown-linux-gnu target not found"
          rustup target list --installed
          exit 1
        }
        # Ensure cargo is available when depends system needs it by creating symlinks
        mkdir -p depends/aarch64-linux-gnu/native/bin
        ln -sf "$CARGO_BIN_PATH" depends/aarch64-linux-gnu/native/bin/cargo
        ./zcutil/build-arm.sh -j$(nproc)
        
    - name: Run C++ tests (Linux AArch64)
      if: ${{ false }}
      run: make check

    - name: Display test-suite.log on failure (Linux AArch64)
      if: failure()
      run: |
        echo "Attempting to display src/test-suite.log..."
        if [ -f src/test-suite.log ]; then
          cat src/test-suite.log
        else
          echo "src/test-suite.log not found."
          echo "Listing src directory:"
          ls -la src
        fi

    - name: Run Python utility tests (Linux AArch64)
      if: ${{ false }}
      env:
        PYTHONPATH: ./src/test 
        SRCDIR: ./src
        BUILDDIR: ./src 
      run: |
        python3 src/test/bitcoin-util-test.py
        python3 src/test/wallet-utility.py

    - name: Run Python functional tests (Linux AArch64)
      if: ${{ false }}
      env:
        PATH: "${{ github.workspace }}/src:$PATH"
      run: test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (AArch64 Daemon)
      run: |
        aarch64-linux-gnu-strip src/pirated
        aarch64-linux-gnu-strip src/pirate-cli
        aarch64-linux-gnu-strip src/pirate-tx
        zip --junk-paths pirate-aarch64.zip src/pirated src/pirate-cli src/pirate-tx
        
    - name: Archive Daemon Binaries (Linux AArch64)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-linux-aarch64-daemon
        path: pirate-aarch64.zip

  # --- QT GUI Build and Test Jobs ---

  build-and-test-qt-linux-x86_64:
    name: Build and Test Treasure Chest (Linux x86_64)
    runs-on: ubuntu-latest
    needs: build-and-test-linux-x86_64
    if: success()

    steps:
    - uses: actions/checkout@v3

    - name: Install QT and other dependencies (Linux x86_64)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libtool autotools-dev automake pkg-config libssl-dev \
          libevent-dev bsdmainutils python3 libboost-system-dev \
          libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev \
          libboost-test-dev libboost-thread-dev libcurl4-openssl-dev \
          python3-zmq libsodium-dev bison curl \
          qttools5-dev qt5-default zip

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Make QT build script executable
      run: chmod +x zcutil/build-qt-linux.sh
    
    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh
      
    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    

    - name: Build Treasure Chest (Linux x86_64)
      run: |
        ./zcutil/build-qt-linux.sh -j$(nproc) 

    - name: Run C++ tests (QT Build - Linux x86_64)
      run: make check

    # - name: Run Python utility tests (QT Build - Linux x86_64)
    #   working-directory: src
    #   env:
    #     PYTHONPATH: ./test
    #     SRCDIR: ./
    #     BUILDDIR: ./
    #   run: |
    #     python3 test/wallet-utility.py

    # - name: Run Python functional tests (QT Build - Linux x86_64)
    #   env:
    #     PATH: "${{ github.workspace }}/src:$PATH"
    #   run: test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (Linux x86_64 QT)
      run: |
        strip pirate-qt-linux
        # Assuming daemon tools are also built and should be packaged separately for consistency
        strip src/pirated
        strip src/pirate-cli
        strip src/pirate-tx
        strip src/wallet/wallet-utility
        zip --junk-paths pirate-qt-linux.zip pirate-qt-linux
        zip --junk-paths pirate-linux-from-qt-build.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        
    - name: Archive Treasure Chest and Binaries (Linux x86_64)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-linux-x86_64
        path: |
          pirate-qt-linux.zip
          pirate-linux-from-qt-build.zip 

  build-and-test-qt-macos-arm64:
    name: Build and Test Treasure Chest (macOS-ARM64)
    runs-on: macos-latest 
    needs: build-and-test-macos-arm64
    if: success()

    steps:
    - uses: actions/checkout@v3

    - name: Install QT and other dependencies (macOS)
      run: |
        brew install autoconf automake libtool pkg-config boost zeromq libsodium coreutils python3 curl qt@5 zip
        echo "/usr/local/opt/qt@5/bin" >> $GITHUB_PATH

    - name: Install Rust (stable with aarch64-apple-darwin target)
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin

    - name: Make QT build script executable
      run: chmod +x zcutil/build-qt-mac.sh

    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh
      
    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    

    - name: Build Treasure Chest (macOS)
      run: |
        ./zcutil/build-qt-mac.sh -j$(sysctl -n hw.ncpu)
        # build-qt-mac.sh calls makeReleaseMac.sh which creates the .app / .dmg

    - name: Run C++ tests (QT Build - macOS)
      run: make check

    # - name: Run Python utility tests (QT Build - macOS)
    #   working-directory: src
    #   env:
    #     PYTHONPATH: ./test
    #     SRCDIR: ./
    #     BUILDDIR: ./
    #   run: |
    #     python3 test/wallet-utility.py

    # - name: Run Python functional tests (QT Build - macOS)
    #   env:
    #     PATH: "${{ github.workspace }}/src:$PATH"
    #   run: python3 test/functional/test_runner.py --jobs=$(sysctl -n hw.ncpu)
        
    - name: Zip Binaries (macOS QT)
      run: |
        # Assuming makeReleaseMac.sh creates PirateWallet-Qt.app in src/qt/
        # and daemon tools are in src/ if built by build-qt-mac.sh
        # Stripping .app bundles is not standard; stripping daemon tools if they exist
        if [ -f src/pirated ]; then strip src/pirated; fi
        if [ -f src/pirate-cli ]; then strip src/pirate-cli; fi
        if [ -f src/pirate-tx ]; then strip src/pirate-tx; fi
        if [ -f src/wallet/wallet-utility ]; then strip src/wallet/wallet-utility; fi
        
        if [ -d src/qt/PirateWallet-Qt.app ]; then 
          zip -r --junk-paths pirate-qt-macos.zip src/qt/PirateWallet-Qt.app
        elif [ -f pirate-qt-mac ]; then # Fallback if .app not found, but pirate-qt-mac was created
          strip pirate-qt-mac
          zip --junk-paths pirate-qt-macos.zip pirate-qt-mac
        fi
        
        # Zip daemon tools separately if they exist
        if [ -f src/pirated ] && [ -f src/pirate-cli ]; then
          zip --junk-paths pirate-macos-from-qt-build.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        fi
        
    - name: Archive Treasure Chest and Binaries (macOS)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-macos
        path: |
          pirate-qt-macos.zip
          pirate-macos-from-qt-build.zip

  build-and-test-qt-windows:
    name: Build and Test Treasure Chest (Windows)
    runs-on: windows-latest 
    needs: build-and-test-windows
    if: success()

    steps:
    - uses: actions/checkout@v3

    - name: Install QT and other dependencies (Windows)
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64 
        update: true
        path-type: inherit
        install: >-
          git make autoconf automake libtool pkg-config mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-boost mingw-w64-x86_64-python3 mingw-w64-x86_64-openssl 
          mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-curl 
          mingw-w64-x86_64-qt5 zip

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Mount Windows Cargo into MSYS2 and Setup for Depends (QT)
      shell: msys2 {0}
      run: |
        # Set up MSYS2 environment with cargo for QT build
        mkdir -p "$HOME"
        ln -sf "$(cygpath -u "$USERPROFILE")/.cargo" "$HOME/.cargo"
        
        # Set up cargo environment variables for MSYS2
        export CARGO_HOME=$(cygpath -u "$USERPROFILE")/.cargo
        export PATH="$CARGO_HOME/bin:$PATH"
        
        echo "=== Cargo Environment Setup (QT) ==="
        echo "CARGO_HOME: $CARGO_HOME"
        echo "PATH: $PATH"
        
        # Verify cargo is accessible
        echo "=== Cargo Verification ==="
        which cargo || echo "cargo not found in PATH"
        if command -v cargo >/dev/null 2>&1; then
          cargo --version
          echo "Cargo is accessible via PATH"
        else
          echo "ERROR: Cargo not accessible via PATH"
          exit 1
        fi
        
        # Ensure cargo will be available for the depends system
        echo "=== Setting up cargo for depends system (QT) ==="
        mkdir -p depends/x86_64-w64-mingw64/native/bin
        
        # Find and copy cargo binary
        CARGO_BINARY=""
        if [ -f "$CARGO_HOME/bin/cargo.exe" ]; then
          CARGO_BINARY="$CARGO_HOME/bin/cargo.exe"
        elif [ -f "$CARGO_HOME/bin/cargo" ]; then
          CARGO_BINARY="$CARGO_HOME/bin/cargo"
        elif command -v cargo >/dev/null 2>&1; then
          CARGO_BINARY=$(which cargo)
        fi
        
        if [ -n "$CARGO_BINARY" ] && [ -f "$CARGO_BINARY" ]; then
          echo "Copying cargo binary to depends location: $CARGO_BINARY"
          cp "$CARGO_BINARY" depends/x86_64-w64-mingw64/native/bin/cargo
          chmod +x depends/x86_64-w64-mingw64/native/bin/cargo
          echo "Cargo setup complete"
          
          # Verify the setup
          depends/x86_64-w64-mingw64/native/bin/cargo --version
        else
          echo "ERROR: Cannot find a valid cargo binary"
          exit 1
        fi
        
        # Make cargo available globally for all subsequent steps
        echo "CARGO_HOME=$CARGO_HOME" >> $GITHUB_ENV
        echo "$CARGO_HOME/bin" >> $GITHUB_PATH
        echo "$(pwd)/depends/x86_64-w64-mingw64/native/bin" >> $GITHUB_PATH

    - name: Make QT build script executable and Fetch Zcash Params (Windows)
      shell: msys2 {0}
      run: |
        chmod +x zcutil/build-qt-win.sh
        ./zcutil/fetch-params.sh
        
    - name: Prepare for Rust build
      shell: msys2 {0}
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep
        
    

    - name: Build Treasure Chest (Windows)
      shell: msys2 {0} 
      run: |
        # Set up cargo for this step
        mkdir -p "$HOME"
        ln -sf "$(cygpath -u "$USERPROFILE")/.cargo" "$HOME/.cargo"
        export CARGO_HOME=$(cygpath -u "$USERPROFILE")/.cargo
        export PATH="$CARGO_HOME/bin:$PATH"
        
        # Ensure cargo is available for depends
        mkdir -p depends/x86_64-w64-mingw64/native/bin
        if command -v cargo >/dev/null 2>&1; then
          cp "$(which cargo)" depends/x86_64-w64-mingw64/native/bin/cargo
          chmod +x depends/x86_64-w64-mingw64/native/bin/cargo
          echo "Cargo available at: $(which cargo)"
          depends/x86_64-w64-mingw64/native/bin/cargo --version
        else
          echo "ERROR: Cargo not found"
          exit 1
        fi
        
        ./zcutil/build-qt-win.sh -j$(nproc)

    - name: Run C++ tests (QT Build - Windows)
      shell: msys2 {0}
      run: make check

    # - name: Run Python utility tests (QT Build - Windows)
    #   working-directory: src
    #   env:
    #     PYTHONPATH: test
    #     SRCDIR: ./
    #     BUILDDIR: ./
    #   shell: msys2 {0}
    #   run: |
    #     python3 test/wallet-utility.py

    # - name: Run Python functional tests (QT Build - Windows)
    #   env:
    #     PATH: "/c/hostedtoolcache/windows/Python/3.9.9/x64:/d/a/pirate/pirate/src:/mingw64/bin:/usr/bin"
    #   shell: msys2 {0}
    #   run: python3 test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (Windows QT)
      shell: msys2 {0}
      run: |
        strip pirate-qt-win.exe
        # Assuming daemon tools are also built and should be packaged separately for consistency
        strip src/pirated.exe
        strip src/pirate-cli.exe
        strip src/pirate-tx.exe
        strip src/wallet/wallet-utility.exe
        zip --junk-paths pirate-qt-win.zip pirate-qt-win.exe
        zip --junk-paths pirate-win-from-qt-build.zip src/pirated.exe src/pirate-cli.exe src/pirate-tx.exe src/wallet/wallet-utility.exe
        
    - name: Archive Treasure Chest and Binaries (Windows)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-windows
        path: |
          pirate-qt-win.zip
          pirate-win-from-qt-build.zip

  build-qt-linux-aarch64:
    name: Build Treasure Chest (Linux AArch64 Cross-Compile)
    runs-on: ubuntu-latest 
    needs: build-daemon-linux-aarch64
    if: success()

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust (stable with aarch64-unknown-linux-gnu target)
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-unknown-linux-gnu

    - name: Install QT and other dependencies (Ubuntu for AArch64 cross-compile)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libtool \
          autotools-dev \
          automake \
          pkg-config \
          libssl-dev \
          libevent-dev \
          bsdmainutils \
          python3 \
          python3-pip \
          libboost-system-dev \
          libboost-filesystem-dev \
          libboost-chrono-dev \
          libboost-program-options-dev \
          libboost-test-dev \
          libboost-thread-dev \
          libminiupnpc-dev \
          libzmq3-dev \
          libqrencode-dev \
          qtbase5-dev \
          qttools5-dev-tools \
          libqt5svg5-dev \
          libqt5charts5-dev \
          libprotobuf-dev \
          protobuf-compiler \
          libqrencode-dev \
          g++-aarch64-linux-gnu \
          gcc-aarch64-linux-gnu \
          binutils-aarch64-linux-gnu \
          libc6-dev-arm64-cross

    - name: Configure Cargo target for Linux AArch64 QT
      run: |
        # Minimal .cargo/config for AArch64 QT, patching bellman & setting target
        mkdir -p .cargo
        echo "# Minimal Cargo config for AArch64 QT" > .cargo/config
        echo "[target.aarch64-unknown-linux-gnu]" >> .cargo/config
        echo "linker = \"aarch64-linux-gnu-gcc\"" >> .cargo/config
        echo "ar = \"aarch64-linux-gnu-ar\"" >> .cargo/config

    - name: Build Treasure Chest (AArch64 Cross-Compile)
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: aarch64-linux-gnu-ar
        CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
        CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
        AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
      run: |
        # Ensure cargo is available for the depends system
        CARGO_BIN_PATH="$(command -v cargo)"
        if [ -z "$CARGO_BIN_PATH" ]; then
          echo "ERROR: Cargo binary not found in PATH" >&2
          exit 1
        fi
        echo "Found cargo at: $CARGO_BIN_PATH"
        # Ensure cargo is available when depends system needs it by creating symlinks
        mkdir -p depends/aarch64-linux-gnu/native/bin
        ln -sf "$CARGO_BIN_PATH" depends/aarch64-linux-gnu/native/bin/cargo
        ./zcutil/build-qt-arm.sh -j$(nproc)
        
    - name: Strip and Zip Binaries (AArch64 QT)
      run: |
        aarch64-linux-gnu-strip pirate-qt-arm
        zip --junk-paths pirate-qt-aarch64.zip pirate-qt-arm
        
    - name: Archive Treasure Chest (Linux AArch64)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-linux-aarch64
        path: pirate-qt-aarch64.zip

  build-and-test-macos-intel:
    name: Build and Test Pirated Daemon (macOS Intel)
    runs-on: macos-12 
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (macOS Intel)
      run: |
        brew install autoconf automake libtool pkg-config boost zeromq libsodium coreutils python3 curl zip dos2unix

    - name: Ensure LF line endings for Makefiles and scripts (macOS Intel)
      shell: bash
      run: |
        find . -type f -name '*.mk' -exec dos2unix {} \;
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        find . -type f -name '*.sh' -exec dos2unix {} \;

    - name: Install Rust (stable with x86_64-apple-darwin target)
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-apple-darwin

    - name: Make build script executable
      run: chmod +x zcutil/build-mac.sh

    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh

    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    - name: Fix Cargo config for macOS Intel
      run: |
        rm -f .cargo/config
        echo "# Minimal Cargo config for macOS Intel" > .cargo/config
        echo "[patch.crates-io]" >> .cargo/config
        echo "bellman = { git = \"https://github.com/piratenetwork/librustzcash\", branch = \"master\" }" >> .cargo/config
        echo "pairing = { git = \"https://github.com/piratenetwork/librustzcash\", branch = \"master\" }" >> .cargo/config

    - name: Build Pirated Daemon (macOS Intel)
      env:
        HOST: x86_64-apple-darwin
      run: |
        ./zcutil/build-mac.sh -j$(sysctl -n hw.ncpu)

    - name: Run C++ tests (macOS Intel)
      run: make check

    - name: Display test-suite.log on failure (macOS Intel)
      if: failure()
      run: |
        echo "Attempting to display src/test-suite.log..."
        if [ -f src/test-suite.log ]; then
          cat src/test-suite.log
        else
          echo "src/test-suite.log not found."
          echo "Listing src directory:"
          ls -la src
        fi

    - name: Run Python utility tests (macOS Intel)
      env:
        PYTHONPATH: ./src/test 
        SRCDIR: ./src
        BUILDDIR: ./src
      run: |
        python3 src/test/bitcoin-util-test.py
        python3 src/test/wallet-utility.py

    - name: Run Python functional tests (macOS Intel)
      env:
        PATH: "${{ github.workspace }}/src:$PATH"
      run: python3 test/functional/test_runner.py --jobs=$(sysctl -n hw.ncpu)
        
    - name: Strip and Zip Binaries (macOS Intel Daemon)
      run: |
        strip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility || true
        zip --junk-paths pirate-macos-intel.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility

    - name: Upload Intel Artifact
      uses: actions/upload-artifact@v4
      with:
        name: pirate-macos-intel-daemon
        path: pirate-macos-intel.zip

  combine-macos-universal-daemon:
    name: Combine macOS Universal Daemon
    runs-on: macos-14
    needs: [build-and-test-macos-arm64, build-and-test-macos-intel]
    if: always()
    steps:
    - name: Check if both builds succeeded
      id: check_builds
      run: |
        if [[ "${{ needs.build-and-test-macos-arm64.result }}" == "success" && "${{ needs.build-and-test-macos-intel.result }}" == "success" ]]; then
          echo "both_success=true" >> $GITHUB_OUTPUT
        else
          echo "both_success=false" >> $GITHUB_OUTPUT
          echo "ARM64 build result: ${{ needs.build-and-test-macos-arm64.result }}"
          echo "Intel build result: ${{ needs.build-and-test-macos-intel.result }}"
        fi

    - uses: actions/download-artifact@v4
      if: steps.check_builds.outputs.both_success == 'true'
      with:
        name: pirate-macos-daemon
        path: arm64
    - uses: actions/download-artifact@v4
      if: steps.check_builds.outputs.both_success == 'true'
      with:
        name: pirate-macos-intel-daemon
        path: x86_64

    - name: Unzip artifacts
      if: steps.check_builds.outputs.both_success == 'true'
      run: |
        unzip -q arm64/*.zip -d arm64/bin
        unzip -q x86_64/*.zip -d x86_64/bin

    - name: Create universal binaries with lipo
      if: steps.check_builds.outputs.both_success == 'true'
      run: |
        mkdir -p universal
        for f in pirated pirate-cli pirate-tx wallet-utility; do
          arm_path="arm64/bin/$f"; intel_path="x86_64/bin/$f"
          lipo -create "$arm_path" "$intel_path" -output "universal/$f"
        done

    - name: Zip universal binaries
      if: steps.check_builds.outputs.both_success == 'true'
      run: |
        zip --junk-paths pirate-macos-universal.zip universal/pirated universal/pirate-cli universal/pirate-tx universal/wallet-utility

    - name: Upload Universal Artifact
      if: steps.check_builds.outputs.both_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: pirate-macos-universal-daemon
        path: pirate-macos-universal.zip

    - name: Fail job if prerequisite builds failed
      if: steps.check_builds.outputs.both_success == 'false'
      run: |
        echo "Cannot create universal binary because one or both prerequisite builds failed"
        exit 1

  build-and-test-qt-macos-intel:
    name: Build and Test Treasure Chest (macOS Intel)
    runs-on: macos-12 
    needs: build-and-test-macos-intel
    if: success()

    steps:
    - uses: actions/checkout@v3

    - name: Install QT and other dependencies (macOS Intel)
      run: |
        brew install autoconf automake libtool pkg-config boost zeromq libsodium coreutils python3 curl qt@5 zip
        echo "/usr/local/opt/qt@5/bin" >> $GITHUB_PATH

    - name: Install Rust (stable with x86_64-apple-darwin target)
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-apple-darwin

    - name: Make QT build script executable
      run: chmod +x zcutil/build-qt-mac.sh

    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh

    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    - name: Fix Cargo config for macOS Intel QT
      run: |
        rm -f .cargo/config
        echo "# Minimal Cargo config for macOS Intel QT" > .cargo/config
        echo "[patch.crates-io]" >> .cargo/config
        echo "bellman = { git = \"https://github.com/piratenetwork/librustzcash\", branch = \"master\" }" >> .cargo/config
        echo "pairing = { git = \"https://github.com/piratenetwork/librustzcash\", branch = \"master\" }" >> .cargo/config

    - name: Build Treasure Chest (macOS Intel)
      env:
        HOST: x86_64-apple-darwin
      run: |
        ./zcutil/build-qt-mac.sh -j$(sysctl -n hw.ncpu)

    - name: Zip Binaries (macOS Intel QT)
      run: |
        # Strip daemon tools if present
        if [ -f src/pirated ]; then strip src/pirated; fi
        if [ -f src/pirate-cli ]; then strip src/pirate-cli; fi
        if [ -f src/pirate-tx ]; then strip src/pirate-tx; fi
        if [ -f src/wallet/wallet-utility ]; then strip src/wallet/wallet-utility; fi

        if [ -d src/qt/PirateWallet-Qt.app ]; then 
          zip -r --junk-paths pirate-qt-macos-intel.zip src/qt/PirateWallet-Qt.app
        elif [ -f pirate-qt-mac ]; then # Fallback binary
          strip pirate-qt-mac
          zip --junk-paths pirate-qt-macos-intel.zip pirate-qt-mac
        fi

        # Zip daemon tools separately if they exist
        if [ -f src/pirated ] && [ -f src/pirate-cli ]; then
          zip --junk-paths pirate-macos-intel-from-qt-build.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        fi

    - name: Archive Treasure Chest and Binaries (macOS Intel)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-macos-intel
        path: |
          pirate-qt-macos-intel.zip
          pirate-macos-intel-from-qt-build.zip