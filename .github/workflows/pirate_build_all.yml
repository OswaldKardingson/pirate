name: Pirated CI - Build and Test all Platforms

on: [push, pull_request]

jobs:
  build-and-test-linux-x86_64:
    name: Build and Test Pirated Daemon (Linux x86_64)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Show commit hash (Linux x86_64)
      run: git rev-parse HEAD

    - name: Install dependencies (Linux x86_64)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libtool autotools-dev automake pkg-config libssl-dev \
          libevent-dev bsdmainutils python3 libboost-system-dev \
          libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev \
          libboost-test-dev libboost-thread-dev libcurl4-openssl-dev \
          python3-zmq libsodium-dev bison curl zip dos2unix

    - name: Ensure LF line endings (Linux x86_64)
      shell: bash
      run: |
        echo "Attempting to convert .mk files to LF..."
        find . -type f -name '*.mk' -exec dos2unix {} \;
        echo "Attempting to convert Makefiles to LF..."
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        echo "Attempting to convert .sh files to LF..."
        find . -type f -name '*.sh' -exec dos2unix {} \;
        echo "Conversion attempt finished."

    - name: Display critical file content (Linux x86_64)
      shell: bash
      run: |
        echo "--- Content of depends/funcs.mk (fetch_file_inner) on Linux x86_64 runner ---"
        if [ -f depends/funcs.mk ]; then
          awk '/define fetch_file_inner/,/endef/' depends/funcs.mk
          echo "--- Content of depends/funcs.mk (configure block) on Linux x86_64 runner ---"
          awk '/^\$\(\$(\1)_configured\):/{p=1} p; /^\$\(AT\)touch \$\$@/{p=0}' depends/funcs.mk
        else
          echo "depends/funcs.mk not found."
        fi
        echo "--------------------------------------------------------------------"

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Make build script executable
      run: chmod +x zcutil/build.sh
    
    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh

    - name: Prepare for Rust linting
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep
        
    - name: Fix Cargo config for Linux x86_64
      run: |
        # Fix the .cargo/config file for Linux x86_64
        echo "# Clean cargo config for Linux x86_64" > .cargo/config
        echo "[source.crates-io]" >> .cargo/config
        echo "replace-with = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.vendored-sources]" >> .cargo/config
        echo "directory = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.piratenetwork-bellman]" >> .cargo/config
        echo "git = \"https://github.com/piratenetwork/librustzcash\"" >> .cargo/config
        echo "branch = \"master\"" >> .cargo/config
        cat .cargo/config
        
    - name: Configure bellman dependency and apply Rust lint fixes
      working-directory: ./src/rust
      run: |
        # Add bellman dependency to Cargo.toml
        if [ -f Cargo.toml ]; then
          echo "Adding bellman dependency to Cargo.toml"
          if ! grep -q 'bellman' Cargo.toml; then
            echo 'bellman = { git = "https://github.com/piratenetwork/librustzcash", branch = "master" }' >> Cargo.toml
          fi
        fi
        
        # Apply Rust lint fixes
        cargo fix --lib -p librustzcash --allow-dirty --allow-staged

    - name: Build Pirated Daemon (Linux x86_64)
      run: |
        ./zcutil/build.sh -j$(nproc)

    - name: Run C++ tests (Linux x86_64)
      run: make check

    - name: Display test-suite.log on failure (Linux x86_64)
      if: failure()
      run: |
        echo "Attempting to display src/test-suite.log..."
        if [ -f src/test-suite.log ]; then
          cat src/test-suite.log
        else
          echo "src/test-suite.log not found."
          echo "Listing src directory:"
          ls -la src
        fi

    - name: Run Python utility tests (Linux x86_64)
      env:
        PYTHONPATH: ./src/test 
        SRCDIR: ./src
        BUILDDIR: ./src 
      run: |
        python3 src/test/bitcoin-util-test.py
        python3 src/test/wallet-utility.py

    - name: Run Python functional tests (Linux x86_64)
      env:
        PATH: "${{ github.workspace }}/src:$PATH"
      run: test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (Linux x86_64 Daemon)
      run: |
        strip src/pirated
        strip src/pirate-cli
        strip src/pirate-tx
        strip src/wallet/wallet-utility
        zip --junk-paths pirate-linux.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        
    - name: Archive Daemon Binaries (Linux x86_64)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-linux-x86_64-daemon
        path: pirate-linux.zip

  build-and-test-macos:
    name: Build and Test Pirated Daemon (macOS)
    runs-on: macos-latest 

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (macOS)
      run: |
        brew install autoconf automake libtool pkg-config boost zeromq libsodium coreutils python3 curl zip dos2unix

    - name: Ensure LF line endings for Makefiles and scripts (macOS)
      shell: bash
      run: |
        echo "Attempting to convert .mk files to LF..."
        find . -type f -name '*.mk' -exec dos2unix {} \;
        echo "Attempting to convert Makefiles to LF..."
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        echo "Attempting to convert .sh files to LF..."
        find . -type f -name '*.sh' -exec dos2unix {} \;
        echo "Conversion attempt finished."

    - name: Display critical file content (macOS)
      shell: bash
      run: |
        echo "--- Content of depends/funcs.mk (fetch_file_inner) on macOS runner ---"
        if [ -f depends/funcs.mk ]; then
          awk '/define fetch_file_inner/,/endef/' depends/funcs.mk
          echo "--- Content of depends/funcs.mk (configure block) on macOS runner ---"
          awk '/^\$\(\$(\1)_configured\):/{p=1} p; /^\$\(AT\)touch \$\$@/{p=0}' depends/funcs.mk
        else
          echo "depends/funcs.mk not found."
        fi
        echo "--------------------------------------------------------------------"

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Make build script executable
      run: chmod +x zcutil/build-mac.sh

    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh
      
    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    - name: Fix Cargo config for macOS
      run: |
        # Fix the .cargo/config file for macOS
        rm -f .cargo/config
        echo "# Clean cargo config for macOS" > .cargo/config
        echo "[source.crates-io]" >> .cargo/config
        echo "replace-with = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.vendored-sources]" >> .cargo/config
        echo "directory = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.piratenetwork-bellman]" >> .cargo/config
        echo "git = \"https://github.com/piratenetwork/librustzcash\"" >> .cargo/config
        echo "branch = \"master\"" >> .cargo/config
        cat .cargo/config

    - name: Build Pirated Daemon (macOS)
      run: |
        ./zcutil/build-mac.sh -j$(sysctl -n hw.ncpu)

    - name: Run C++ tests (macOS)
      run: make check

    - name: Display config.log on failure (macOS)
      if: failure()
      run: |
        echo "Attempting to display config.log..."
        if [ -f config.log ]; then
          cat config.log
        else
          echo "config.log not found."
          echo "Listing current directory:"
          ls -la
        fi

    - name: Run Python utility tests (macOS)
      env:
        PYTHONPATH: ./src/test 
        SRCDIR: ./src
        BUILDDIR: ./src 
      run: |
        python3 src/test/bitcoin-util-test.py
        python3 src/test/wallet-utility.py

    - name: Run Python functional tests (macOS)
      env:
        PATH: "${{ github.workspace }}/src:$PATH"
      run: python3 test/functional/test_runner.py --jobs=$(sysctl -n hw.ncpu)
        
    - name: Strip and Zip Binaries (macOS Daemon)
      run: |
        strip src/pirated
        strip src/pirate-cli
        strip src/pirate-tx
        strip src/wallet/wallet-utility
        zip --junk-paths pirate-macos.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        
    - name: Archive Daemon Binaries (macOS)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-macos-daemon
        path: pirate-macos.zip

  build-and-test-windows:
    name: Build and Test Pirated Daemon (Windows)
    runs-on: windows-latest 

    steps:
    - uses: actions/checkout@v3

    - name: Ensure LF line endings for Makefiles and scripts (Windows)
      shell: bash
      run: |
        echo "Attempting to convert .mk files to LF..."
        find . -type f -name '*.mk' -exec dos2unix {} \;
        echo "Attempting to convert Makefiles to LF..."
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        echo "Attempting to convert .sh files to LF..."
        find . -type f -name '*.sh' -exec dos2unix {} \;
        echo "Conversion attempt finished."

    - name: Display critical file line endings and content (Windows)
      shell: bash
      run: |
        echo "--- Verifying line endings for depends/funcs.mk (using od -c) ---"
        if [ -f depends/funcs.mk ]; then
          od -c depends/funcs.mk | head -n 30
        else
          echo "depends/funcs.mk not found for od -c."
        fi
        echo "--- Content of depends/funcs.mk (fetch_file_inner) on Windows runner ---"
        if [ -f depends/funcs.mk ]; then
          awk '/define fetch_file_inner/,/endef/' depends/funcs.mk
          echo "--- Content of depends/funcs.mk (configure block) on Windows runner ---"
          awk '/^\$\(\$(\1)_configured\):/{p=1} p; /^\$\(AT\)touch \$\$@/{p=0}' depends/funcs.mk
        else
          echo "depends/funcs.mk not found for awk."
        fi
        echo "-----------------------------------------------------------------"

    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64 
        update: true
        install: >-
          git make autoconf automake libtool pkg-config mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-boost mingw-w64-x86_64-python3 mingw-w64-x86_64-openssl 
          mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-curl zip

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Make build script executable and Fetch Zcash Params (Windows)
      shell: msys2 {0}
      run: |
        chmod +x zcutil/build-win.sh
        ./zcutil/fetch-params.sh
        
    - name: Prepare for Rust build (Windows)
      shell: msys2 {0}
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep
        
    - name: Fix Cargo config for Windows
      shell: msys2 {0}
      run: |
        # Fix the .cargo/config file for Windows
        rm -f .cargo/config
        echo "# Clean cargo config for Windows" > .cargo/config
        echo "[source.crates-io]" >> .cargo/config
        echo "replace-with = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.vendored-sources]" >> .cargo/config
        echo "directory = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.piratenetwork-bellman]" >> .cargo/config
        echo "git = \"https://github.com/piratenetwork/librustzcash\"" >> .cargo/config
        echo "branch = \"master\"" >> .cargo/config
        cat .cargo/config

    - name: Install build dependencies (Windows)
      shell: msys2 {0}
      run: |
        pacman -S --noconfirm --needed \
          mingw-w64-x86_64-toolchain \
          mingw-w64-x86_64-cmake \
          mingw-w64-x86_64-boost \
          mingw-w64-x86_64-openssl \
          mingw-w64-x86_64-libevent \
          mingw-w64-x86_64-zeromq \
          mingw-w64-x86_64-miniupnpc \
          mingw-w64-x86_64-protobuf \
          mingw-w64-x86_64-qrencode \
          mingw-w64-x86_64-libsodium \
          curl \
          unzip \
          zip \
          patch

    - name: Prepare directories for Windows build
      shell: msys2 {0}
      run: |
        echo "--- Creating necessary directories for Windows build ---"
        mkdir -p depends/sources/download-stamps
        mkdir -p depends/work/download/native_ccache-3.7.4
        mkdir -p depends/work/build
        mkdir -p depends/SDKs
        mkdir -p depends/sdk-sources
        echo "--- Directories created ---"
        
    - name: Patch funcs.mk for Windows
      shell: msys2 {0}
      run: |
        echo "--- Patching funcs.mk for Windows ---"
        # Create a backup of the original file
        cp depends/funcs.mk depends/funcs.mk.orig
        # Apply our patch to improve download reliability
        patch -p0 depends/funcs.mk < depends/patches/funcs-win-download-fix.patch || {
          echo "Patch failed, using direct sed replacement"
          sed -i 's|$(build_DOWNLOAD) "$$($(1)_download_dir)/$(4).temp" "$(2)/$(3)"|curl --connect-timeout 30 --retry 5 --retry-delay 5 --retry-max-time 600 -L -o "$$($(1)_download_dir)/$(4).temp" "$(2)/$(3)"|g' depends/funcs.mk
        }
        echo "--- Patching complete ---"
        
    - name: Debug Make in MSYS2 (Windows)
      shell: msys2 {0}
      run: |
        echo "--- Debugging make command ---"
        cd depends
        echo "Current directory: $(pwd)"
        echo "Listing directory contents:"
        ls -la
        echo "Output of 'type make':"
        type make
        echo "Attempting to run 'make --version':"
        make --version
        echo "Value of build_DOWNLOAD variable:"
        make -p | grep -E '^build_DOWNLOAD\s*=' 
        echo "Attempting to run 'make -n HOST=x86_64-w64-mingw64 V=1' (dry run):"
        make -n HOST=x86_64-w64-mingw64 V=1
        echo "--- End Debugging make command ---"
        cd ..

    - name: Build Pirated Daemon (Windows)
      shell: msys2 {0}
      run: |
        # Set environment variables to help with downloads
        export CURL_RETRIES=5
        export DOWNLOAD_CONNECT_TIMEOUT=30
        export DOWNLOAD_TIMEOUT=600
        
        # Build with more verbose output and fewer jobs to avoid resource issues
        ./zcutil/build-win.sh -j2 V=1

    - name: Run C++ tests (Windows)
      shell: msys2 {0}
      run: make check

    - name: Run Python utility tests (Windows)
      env:
        PYTHONPATH: src/test 
        SRCDIR: src
        BUILDDIR: src
      shell: msys2 {0} 
      run: |
        python3 src/test/bitcoin-util-test.py 
        python3 src/test/wallet-utility.py

    - name: Run Python functional tests (Windows)
      env:
        PATH: "/c/hostedtoolcache/windows/Python/3.9.9/x64:/d/a/pirate/pirate/src:/mingw64/bin:/usr/bin"
      shell: msys2 {0}
      run: python3 test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (Windows Daemon)
      shell: msys2 {0}
      run: |
        strip src/pirated.exe
        strip src/pirate-cli.exe
        strip src/pirate-tx.exe
        strip src/wallet/wallet-utility.exe
        zip --junk-paths pirate-win.zip src/pirated.exe src/pirate-cli.exe src/pirate-tx.exe src/wallet/wallet-utility.exe
        
    - name: Archive Daemon Binaries (Windows)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-win-daemon
        path: pirate-win.zip

  build-daemon-linux-aarch64:
    name: Build Pirated Daemon (Linux AArch64 Cross-Compile)
    runs-on: ubuntu-latest 

    steps:
    - uses: actions/checkout@v3

    - name: Show commit hash (Linux AArch64)
      run: git rev-parse HEAD

    - name: Install dependencies (Ubuntu for AArch64 cross-compile)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential pkg-config autoconf libtool automake bsdmainutils \
          python3 curl g++-aarch64-linux-gnu gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu zip dos2unix

    - name: Ensure LF line endings (Linux AArch64)
      shell: bash
      run: |
        echo "Attempting to convert .mk files to LF..."
        find . -type f -name '*.mk' -exec dos2unix {} \;
        echo "Attempting to convert Makefiles to LF..."
        find . -type f -name 'Makefile' -exec dos2unix {} \;
        echo "Attempting to convert .sh files to LF..."
        find . -type f -name '*.sh' -exec dos2unix {} \;
        echo "Conversion attempt finished."

    - name: Display critical file content (Linux AArch64)
      shell: bash
      run: |
        echo "--- Content of depends/funcs.mk (fetch_file_inner) on Linux AArch64 runner ---"
        if [ -f depends/funcs.mk ]; then
          awk '/define fetch_file_inner/,/endef/' depends/funcs.mk
          echo "--- Content of depends/funcs.mk (configure block) on Linux AArch64 runner ---"
          awk '/^\$\(\$(\1)_configured\):/{p=1} p; /^\$\(AT\)touch \$\$@/{p=0}' depends/funcs.mk
        else
          echo "depends/funcs.mk not found."
        fi
        echo "--------------------------------------------------------------------"

    - name: Install Rust (stable, AArch64 target)
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-unknown-linux-gnu

    - name: Make build script executable
      run: chmod +x zcutil/build-arm.sh

    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    - name: Fix Cargo config for Linux AArch64
      run: |
        # Fix the .cargo/config file for Linux AArch64
        echo "# Clean cargo config for Linux AArch64" > .cargo/config
        echo "[target.aarch64-unknown-linux-gnu]" >> .cargo/config
        echo "linker = \"aarch64-linux-gnu-gcc\"" >> .cargo/config
        echo "ar = \"aarch64-linux-gnu-ar\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.crates-io]" >> .cargo/config
        echo "replace-with = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.vendored-sources]" >> .cargo/config
        echo "directory = \"vendored-sources\"" >> .cargo/config
        cat .cargo/config

    - name: Build Pirated Daemon (AArch64 Cross-Compile)
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: aarch64-linux-gnu-ar
        RUSTFLAGS: --cfg=rust_secp_no_symbol_renaming -L native=/home/runner/work/pirate/pirate/src/secp256k1/.libs
      run: |
        ./zcutil/build-arm.sh -j$(nproc)
        
    - name: Strip and Zip Binaries (AArch64 Daemon)
      run: |
        aarch64-linux-gnu-strip src/pirated
        aarch64-linux-gnu-strip src/pirate-cli
        aarch64-linux-gnu-strip src/pirate-tx
        zip --junk-paths pirate-aarch64.zip src/pirated src/pirate-cli src/pirate-tx
        
    - name: Archive Daemon Binaries (Linux AArch64)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-linux-aarch64-daemon
        path: pirate-aarch64.zip

  # --- QT GUI Build and Test Jobs ---

  build-and-test-qt-linux-x86_64:
    name: Build and Test Treasure Chest (Linux x86_64)
    runs-on: ubuntu-latest
    needs: build-and-test-linux-x86_64

    steps:
    - uses: actions/checkout@v3

    - name: Install QT and other dependencies (Linux x86_64)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libtool autotools-dev automake pkg-config libssl-dev \
          libevent-dev bsdmainutils python3 libboost-system-dev \
          libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev \
          libboost-test-dev libboost-thread-dev libcurl4-openssl-dev \
          python3-zmq libsodium-dev bison curl \
          qttools5-dev qt5-default zip

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Make QT build script executable
      run: chmod +x zcutil/build-qt-linux.sh
    
    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh
      
    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    - name: Fix Cargo config for Linux x86_64 QT
      run: |
        # Fix the .cargo/config file for Linux x86_64
        echo "# Clean cargo config for Linux x86_64 QT" > .cargo/config
        echo "[source.crates-io]" >> .cargo/config
        echo "replace-with = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.vendored-sources]" >> .cargo/config
        echo "directory = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.piratenetwork-bellman]" >> .cargo/config
        echo "git = \"https://github.com/piratenetwork/librustzcash\"" >> .cargo/config
        echo "branch = \"master\"" >> .cargo/config
        cat .cargo/config

    - name: Build Treasure Chest (Linux x86_64)
      run: |
        ./zcutil/build-qt-linux.sh -j$(nproc) 

    - name: Run C++ tests (QT Build - Linux x86_64)
      run: make check

    - name: Run Python utility tests (QT Build - Linux x86_64)
      env:
        PYTHONPATH: ./src/test 
        SRCDIR: ./src
        BUILDDIR: ./src 
      run: |
        python3 src/test/bitcoin-util-test.py
        python3 src/test/wallet-utility.py

    - name: Run Python functional tests (QT Build - Linux x86_64)
      env:
        PATH: "${{ github.workspace }}/src:$PATH"
      run: test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (Linux x86_64 QT)
      run: |
        strip pirate-qt-linux
        # Assuming daemon tools are also built and should be packaged separately for consistency
        strip src/pirated
        strip src/pirate-cli
        strip src/pirate-tx
        strip src/wallet/wallet-utility
        zip --junk-paths pirate-qt-linux.zip pirate-qt-linux
        zip --junk-paths pirate-linux-from-qt-build.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        
    - name: Archive Treasure Chest and Binaries (Linux x86_64)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-linux-x86_64
        path: |
          pirate-qt-linux.zip
          pirate-linux-from-qt-build.zip 

  build-and-test-qt-macos:
    name: Build and Test Treasure Chest (macOS)
    runs-on: macos-latest 
    needs: build-and-test-macos

    steps:
    - uses: actions/checkout@v3

    - name: Install QT and other dependencies (macOS)
      run: |
        brew install autoconf automake libtool pkg-config boost zeromq libsodium coreutils python3 curl qt@5 zip
        echo "/usr/local/opt/qt@5/bin" >> $GITHUB_PATH

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Make QT build script executable
      run: chmod +x zcutil/build-qt-mac.sh

    - name: Fetch Zcash Params
      run: ./zcutil/fetch-params.sh
      
    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    - name: Fix Cargo config for macOS
      run: |
        # Fix the .cargo/config file for macOS
        rm -f .cargo/config
        echo "# Clean cargo config for macOS" > .cargo/config
        echo "[source.crates-io]" >> .cargo/config
        echo "replace-with = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.vendored-sources]" >> .cargo/config
        echo "directory = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.piratenetwork-bellman]" >> .cargo/config
        echo "git = \"https://github.com/piratenetwork/librustzcash\"" >> .cargo/config
        echo "branch = \"master\"" >> .cargo/config
        cat .cargo/config

    - name: Build Treasure Chest (macOS)
      run: |
        ./zcutil/build-qt-mac.sh -j$(sysctl -n hw.ncpu)
        # build-qt-mac.sh calls makeReleaseMac.sh which creates the .app / .dmg

    - name: Run C++ tests (QT Build - macOS)
      run: make check

    - name: Run Python utility tests (QT Build - macOS)
      env:
        PYTHONPATH: ./src/test 
        SRCDIR: ./src
        BUILDDIR: ./src 
      run: |
        python3 src/test/bitcoin-util-test.py
        python3 src/test/wallet-utility.py

    - name: Run Python functional tests (QT Build - macOS)
      env:
        PATH: "${{ github.workspace }}/src:$PATH"
      run: python3 test/functional/test_runner.py --jobs=$(sysctl -n hw.ncpu)
        
    - name: Zip Binaries (macOS QT)
      run: |
        # Assuming makeReleaseMac.sh creates PirateWallet-Qt.app in src/qt/
        # and daemon tools are in src/ if built by build-qt-mac.sh
        # Stripping .app bundles is not standard; stripping daemon tools if they exist
        if [ -f src/pirated ]; then strip src/pirated; fi
        if [ -f src/pirate-cli ]; then strip src/pirate-cli; fi
        if [ -f src/pirate-tx ]; then strip src/pirate-tx; fi
        if [ -f src/wallet/wallet-utility ]; then strip src/wallet/wallet-utility; fi
        
        if [ -d src/qt/PirateWallet-Qt.app ]; then 
          zip -r --junk-paths pirate-qt-macos.zip src/qt/PirateWallet-Qt.app
        elif [ -f pirate-qt-mac ]; then # Fallback if .app not found, but pirate-qt-mac was created
          strip pirate-qt-mac
          zip --junk-paths pirate-qt-macos.zip pirate-qt-mac
        fi
        
        # Zip daemon tools separately if they exist
        if [ -f src/pirated ] && [ -f src/pirate-cli ]; then
          zip --junk-paths pirate-macos-from-qt-build.zip src/pirated src/pirate-cli src/pirate-tx src/wallet/wallet-utility
        fi
        
    - name: Archive Treasure Chest and Binaries (macOS)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-macos
        path: |
          pirate-qt-macos.zip
          pirate-macos-from-qt-build.zip

  build-and-test-qt-windows:
    name: Build and Test Treasure Chest (Windows)
    runs-on: windows-latest 
    needs: build-and-test-windows

    steps:
    - uses: actions/checkout@v3

    - name: Install QT and other dependencies (Windows)
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64 
        update: true
        install: >-
          git make autoconf automake libtool pkg-config mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-boost mingw-w64-x86_64-python3 mingw-w64-x86_64-openssl 
          mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-curl 
          mingw-w64-x86_64-qt5 zip

    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@stable

    - name: Make QT build script executable and Fetch Zcash Params (Windows)
      shell: msys2 {0}
      run: |
        chmod +x zcutil/build-qt-win.sh
        ./zcutil/fetch-params.sh
        
    - name: Prepare for Rust build
      shell: msys2 {0}
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep
        
    - name: Fix Cargo config for Windows QT
      shell: msys2 {0}
      run: |
        # Fix the .cargo/config file for Windows QT
        rm -f .cargo/config
        echo "# Clean cargo config for Windows QT" > .cargo/config
        echo "[source.crates-io]" >> .cargo/config
        echo "replace-with = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.vendored-sources]" >> .cargo/config
        echo "directory = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.piratenetwork-bellman]" >> .cargo/config
        echo "git = \"https://github.com/piratenetwork/librustzcash\"" >> .cargo/config
        echo "branch = \"master\"" >> .cargo/config
        cat .cargo/config

    - name: Build Treasure Chest (Windows)
      shell: msys2 {0} 
      run: |
        ./zcutil/build-qt-win.sh -j$(nproc)

    - name: Run C++ tests (QT Build - Windows)
      shell: msys2 {0}
      run: make check

    - name: Run Python utility tests (QT Build - Windows)
      env:
        PYTHONPATH: src/test 
        SRCDIR: src
        BUILDDIR: src
      shell: msys2 {0} 
      run: |
        python3 src/test/bitcoin-util-test.py 
        python3 src/test/wallet-utility.py

    - name: Run Python functional tests (QT Build - Windows)
      env:
        PATH: "/c/hostedtoolcache/windows/Python/3.9.9/x64:/d/a/pirate/pirate/src:/mingw64/bin:/usr/bin"
      shell: msys2 {0}
      run: python3 test/functional/test_runner.py --jobs=$(nproc)
        
    - name: Strip and Zip Binaries (Windows QT)
      shell: msys2 {0}
      run: |
        strip pirate-qt-win.exe
        # Assuming daemon tools are also built and should be packaged separately for consistency
        strip src/pirated.exe
        strip src/pirate-cli.exe
        strip src/pirate-tx.exe
        strip src/wallet/wallet-utility.exe
        zip --junk-paths pirate-qt-win.zip pirate-qt-win.exe
        zip --junk-paths pirate-win-from-qt-build.zip src/pirated.exe src/pirate-cli.exe src/pirate-tx.exe src/wallet/wallet-utility.exe
        
    - name: Archive Treasure Chest and Binaries (Windows)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-windows
        path: |
          pirate-qt-win.zip
          pirate-win-from-qt-build.zip

  build-qt-arm:
    name: Build Treasure Chest (Linux AArch64 Cross-Compile)
    runs-on: ubuntu-latest 
    needs: build-daemon-linux-aarch64

    steps:
    - uses: actions/checkout@v3

    - name: Install QT and other dependencies (Ubuntu for AArch64 cross-compile)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential pkg-config autoconf libtool automake bsdmainutils \
          python3 curl g++-aarch64-linux-gnu gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu \
          qttools5-dev zip

    - name: Install Rust (stable, AArch64 target)
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-unknown-linux-gnu

    - name: Make QT build script executable
      run: chmod +x zcutil/build-qt-arm.sh

    - name: Prepare for Rust build
      run: |
        mkdir -p vendored-sources
        touch vendored-sources/.keep

    - name: Fix Cargo config for Linux AArch64 QT
      run: |
        # Fix the .cargo/config file for Linux AArch64 QT
        rm -f .cargo/config
        echo "# Clean cargo config for Linux AArch64 QT" > .cargo/config
        echo "[target.aarch64-unknown-linux-gnu]" >> .cargo/config
        echo "linker = \"aarch64-linux-gnu-gcc\"" >> .cargo/config
        echo "ar = \"aarch64-linux-gnu-ar\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.crates-io]" >> .cargo/config
        echo "replace-with = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.vendored-sources]" >> .cargo/config
        echo "directory = \"vendored-sources\"" >> .cargo/config
        echo "" >> .cargo/config
        echo "[source.piratenetwork-bellman]" >> .cargo/config
        echo "git = \"https://github.com/piratenetwork/librustzcash\"" >> .cargo/config
        echo "branch = \"master\"" >> .cargo/config
        cat .cargo/config

    - name: Build Treasure Chest (AArch64 Cross-Compile)
      run: |
        ./zcutil/build-qt-arm.sh -j$(nproc)
        
    - name: Strip and Zip Binaries (AArch64 QT)
      run: |
        aarch64-linux-gnu-strip pirate-qt-arm
        zip --junk-paths pirate-qt-aarch64.zip pirate-qt-arm
        
    - name: Archive Treasure Chest (Linux AArch64)
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: pirate-treasure-chest-linux-aarch64
        path: pirate-qt-aarch64.zip