# we are using separate workflow because CI producing test binaries with CPPFLAGS=-DTESTMODE

# name: Pirate build - Ubuntu 20.04


# on:
#   push:
#     branches:
#     - master
#     - beta


# jobs:

#   linux-build:
#     name: Linux Build
#     # using there as old release as possible with GHA worker to provide better compatibility
#     runs-on: ubuntu-20.04
#     steps:

#       - name: Extract branch name
#         shell: bash
#         run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_OUTPUT"
#         id: extract_branch

#       - name: Shortify commit sha
#         shell: bash
#         run: echo "sha_short=$(echo ${GITHUB_SHA::7})" >> "$GITHUB_OUTPUT"
#         id: shortify_commit

#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Install deps (Linux)
#         run: |
#           sudo apt-get update  # prevents repo404 errors on apt-remove below
#           sudo apt-get upgrade -y
#           sudo apt-get install -y build-essential pkg-config m4 g++-multilib autoconf libtool libncurses-dev unzip git python3 python3-zmq zlib1g-dev wget libcurl4-gnutls-dev bsdmainutils curl libsodium-dev bison
#       - name: Build (Linux)
#         if: runner.os == 'Linux'
#         run: |
#           ./zcutil/build-qt-linux.sh -j$(nproc)
#           strip src/pirated
#           strip src/pirate-cli
#           strip pirate-qt-linux
#           zip --junk-paths pirate-linux src/pirated src/pirate-cli
#           zip --junk-paths pirate-qt-linux pirate-qt-linux
#       - name: Upload pirate-linux.zip as artifact
#         uses: actions/upload-artifact@v1
#         with:
#           name: pirate-linux
#           path: ./pirate-linux.zip
#       - name: Upload pirate-qt-linux.zip as artifact
#         uses: actions/upload-artifact@v1
#         with:
#           name: pirate-qt-linux
#           path: ./pirate-qt-linux.zip
